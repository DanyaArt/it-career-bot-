import json
import uuid
import threading
import time
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from .models import Base, UserAnswer, Specialization, University, UserSession, Question

class Database:
    def __init__(self, db_url):
        self.engine = create_engine(db_url, connect_args={"check_same_thread": False, "timeout": 30})
        Base.metadata.create_all(self.engine)
        self.Session = sessionmaker(bind=self.engine)
        self._lock = threading.Lock()
    
    def _get_session(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        return self.Session()
    
    def _close_session(self, session):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é"""
        try:
            if session:
                session.close()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    def _retry_operation(self, operation, max_retries=3, delay=0.1):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                return operation()
            except Exception as e:
                if "database is locked" in str(e) and attempt < max_retries - 1:
                    print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}: –ë–î –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                    time.sleep(delay * (attempt + 1))
                    continue
                else:
                    raise e
    
    def get_question(self, question_id):
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ID –∏–∑ –ë–î"""
        def _get_question_operation():
            session = None
            try:
                with self._lock:
                    session = self._get_session()
                    question = session.query(Question).filter_by(id=question_id).first()
                    if question:
                        return {
                            "id": question.id,
                            "text": question.text,
                            "category": question.category,
                            "options": json.loads(question.options)
                        }
                    return None
            finally:
                self._close_session(session)
        
        try:
            return self._retry_operation(_get_question_operation)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_question: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–æ–¥–∞ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            return self._get_questions().get(question_id)
    
    def _get_questions(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞"""
        return {
            1: {
                "id": 1,
                "text": "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –Ω–æ–≤—ã–π –≥–∞–¥–∂–µ—Ç/–ø—Ä–æ–≥—Ä–∞–º–º—É?",
                "category": "technical",
                "options": [
                    {"text": "–•–æ—á—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å/–∏–∑—É—á–∏—Ç—å –µ–≥–æ –∫–æ–¥", "value": 4, "category": "code"},
                    {"text": "–ò–∑—É—á–∞—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Ç–µ—Ö. —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "value": 8, "category": "data"},
                    {"text": "–û—Ü–µ–Ω–∏–≤–∞—é –¥–∏–∑–∞–π–Ω –∏ —É–¥–æ–±—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", "value": 12, "category": "design"},
                    {"text": "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "value": 16, "category": "security"}
                ]
            },
            2: {
                "id": 2,
                "text": "–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º?",
                "category": "technical",
                "options": [
                    {"text": "–ü–∏—à—É –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ—à–µ–Ω–∏—è", "value": 4, "category": "code"},
                    {"text": "–°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫", "value": 8, "category": "data"},
                    {"text": "–ò—â—É –∫—Ä–∞—Å–∏–≤–æ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "value": 12, "category": "design"},
                    {"text": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–∑–º–æ–∂–Ω—ã–µ —É–≥—Ä–æ–∑—ã", "value": 16, "category": "security"}
                ]
            },
            3: {
                "id": 3,
                "text": "–ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤–∞—Å –±–æ–ª—å—à–µ —É–≤–ª–µ—á–µ—Ç?",
                "category": "technical",
                "options": [
                    {"text": "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞", "value": 4, "category": "code"},
                    {"text": "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤", "value": 8, "category": "data"},
                    {"text": "–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞", "value": 12, "category": "design"},
                    {"text": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã —Å–∏—Å—Ç–µ–º—ã", "value": 16, "category": "security"}
                ]
            },
            4: {
                "id": 4,
                "text": "–í–∞—à–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?",
                "category": "technical",
                "options": [
                    {"text": "–ù—É–∂–Ω–∞ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤", "value": 4, "category": "code"},
                    {"text": "–û—Å–Ω–æ–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "value": 8, "category": "data"},
                    {"text": "–ü–æ–ª–µ–∑–Ω–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∏", "value": 12, "category": "design"},
                    {"text": "–í–∞–∂–Ω–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "value": 16, "category": "security"}
                ]
            },
            5: {
                "id": 5,
                "text": "–ö–∞–∫–æ–π —è–∑—ã–∫ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ?",
                "category": "technical",
                "options": [
                    {"text": "Python/Java", "value": 4, "category": "code"},
                    {"text": "SQL/R", "value": 8, "category": "data"},
                    {"text": "HTML/CSS", "value": 12, "category": "design"},
                    {"text": "Assembly", "value": 16, "category": "security"}
                ]
            },
            6: {
                "id": 6,
                "text": "–ö–∞–∫–æ–π —Å–æ—Ñ—Ç –≤–∞–º –±–ª–∏–∂–µ?",
                "category": "technical",
                "options": [
                    {"text": "IDE (VSCode)", "value": 4, "category": "code"},
                    {"text": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (Tableau)", "value": 8, "category": "data"},
                    {"text": "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã (Figma)", "value": 12, "category": "design"},
                    {"text": "–°–∫–∞–Ω–µ—Ä—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π", "value": 16, "category": "security"}
                ]
            },
            7: {
                "id": 7,
                "text": "–ö–∞–∫–æ–π —Ö–æ–±–±–∏-–ø—Ä–æ–µ–∫—Ç –≤—ã–±–µ—Ä–µ—Ç–µ?",
                "category": "technical",
                "options": [
                    {"text": "–°–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "value": 4, "category": "code"},
                    {"text": "–ê–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫", "value": 8, "category": "data"},
                    {"text": "–î–∏–∑–∞–π–Ω –ø–æ—Å—Ç–µ—Ä–∞", "value": 12, "category": "design"},
                    {"text": "–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞", "value": 16, "category": "security"}
                ]
            },
            8: {
                "id": 8,
                "text": "–í–∞—à —Å—Ç–∏–ª—å —Ä–∞–±–æ—Ç—ã:",
                "category": "technical",
                "options": [
                    {"text": "–°–∏—Å—Ç–µ–º–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "value": 4, "category": "code"},
                    {"text": "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π", "value": 8, "category": "data"},
                    {"text": "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ –≥–∏–±–∫–∏–π", "value": 12, "category": "design"},
                    {"text": "–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –∏ –º–µ—Ç–æ–¥–∏—á–Ω—ã–π", "value": 16, "category": "security"}
                ]
            },
            9: {
                "id": 9,
                "text": "–ß—Ç–æ –≤–∞–∂–Ω–µ–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ?",
                "category": "technical",
                "options": [
                    {"text": "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–¥–∞", "value": 4, "category": "code"},
                    {"text": "–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö", "value": 8, "category": "data"},
                    {"text": "–í–∏–∑—É–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "value": 12, "category": "design"},
                    {"text": "–ó–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã", "value": 16, "category": "security"}
                ]
            },
            10: {
                "id": 10,
                "text": "–ö–∞–∫–æ–π –∫—É—Ä—Å –≤—ã–±–µ—Ä–µ—Ç–µ?",
                "category": "technical",
                "options": [
                    {"text": "–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "value": 4, "category": "code"},
                    {"text": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "value": 8, "category": "data"},
                    {"text": "–í–µ–±-–¥–∏–∑–∞–π–Ω", "value": 12, "category": "design"},
                    {"text": "–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è", "value": 16, "category": "security"}
                ]
            },
            11: {
                "id": 11,
                "text": "–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç?",
                "category": "work_pref",
                "options": [
                    {"text": "–ì–∏–±–∫–∏–π (—É–¥–∞–ª—ë–Ω–∫–∞, —Å–≤–æ–±–æ–¥–Ω—ã–µ —á–∞—Å—ã)", "value": 4, "category": "code"},
                    {"text": "–ß—ë—Ç–∫–∏–π (—Å –ø–ª–∞–Ω–æ–≤—ã–º–∏ –æ—Ç—á—ë—Ç–∞–º–∏)", "value": 8, "category": "data"},
                    {"text": "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–∏–Ω—Ç—ã)", "value": 12, "category": "design"},
                    {"text": "–†–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (—Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤)", "value": 16, "category": "security"}
                ]
            },
            12: {
                "id": 12,
                "text": "–ö–∞–∫–æ–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–µ–Ω?",
                "category": "work_pref",
                "options": [
                    {"text": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", "value": 4, "category": "code"},
                    {"text": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —É—á—ë–Ω—ã–µ", "value": 8, "category": "data"},
                    {"text": "–î–∏–∑–∞–π–Ω–µ—Ä—ã –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä—ã", "value": 12, "category": "design"},
                    {"text": "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ compliance", "value": 16, "category": "security"}
                ]
            },
            13: {
                "id": 13,
                "text": "–ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç?",
                "category": "work_pref",
                "options": [
                    {"text": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–∫–∞ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–∏", "value": 4, "category": "code"},
                    {"text": "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏—Ä–∂–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤", "value": 8, "category": "data"},
                    {"text": "–°–æ–∑–¥–∞–Ω–∏–µ –∞–π–¥–µ–Ω—Ç–∏–∫–∏ –±—Ä–µ–Ω–¥–∞", "value": 12, "category": "design"},
                    {"text": "–ê—É–¥–∏—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã", "value": 16, "category": "security"}
                ]
            },
            14: {
                "id": 14,
                "text": "–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ä—É—Ç–∏–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º?",
                "category": "work_pref",
                "options": [
                    {"text": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é", "value": 4, "category": "code"},
                    {"text": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞ —É–ª—É—á—à–µ–Ω–∏—è", "value": 8, "category": "data"},
                    {"text": "–î–µ–ª–∞—é –∏—Ö —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–º–∏", "value": 12, "category": "design"},
                    {"text": "–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞ —Ä–∏—Å–∫–∏", "value": 16, "category": "security"}
                ]
            },
            15: {
                "id": 15,
                "text": "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–æ –≤ —Ä–∞–±–æ—Ç–µ?",
                "category": "work_pref",
                "options": [
                    {"text": "–°–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤—ã–∑–æ–≤—ã", "value": 4, "category": "code"},
                    {"text": "–¢–æ—á–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å", "value": 8, "category": "data"},
                    {"text": "–í–∏–∑—É–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è", "value": 12, "category": "design"},
                    {"text": "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—â—ë–Ω–Ω–æ—Å—Ç—å", "value": 16, "category": "security"}
                ]
            },
            16: {
                "id": 16,
                "text": "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                "category": "work_pref",
                "options": [
                    {"text": "–•–∞–∫–∞—Ç–æ–Ω—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞", "value": 4, "category": "code"},
                    {"text": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "value": 8, "category": "data"},
                    {"text": "–í–æ—Ä–∫—à–æ–ø—ã –ø–æ –∫—Ä–µ–∞—Ç–∏–≤—É", "value": 12, "category": "design"},
                    {"text": "–ö–µ–π—Å—ã –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "value": 16, "category": "security"}
                ]
            },
            17: {
                "id": 17,
                "text": "–ö–∞–∫–æ–π –æ—Ñ–∏—Å –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç?",
                "category": "work_pref",
                "options": [
                    {"text": "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥ —Å IT-—Å—Ç–∞—Ä—Ç–∞–ø–∞–º–∏", "value": 4, "category": "code"},
                    {"text": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö", "value": 8, "category": "data"},
                    {"text": "–°—Ç—É–¥–∏—è —Å –∞—Ä—Ç-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º", "value": 12, "category": "design"},
                    {"text": "–û—Ñ–∏—Å —Å –∑–∞—â–∏—â—ë–Ω–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π", "value": 16, "category": "security"}
                ]
            },
            18: {
                "id": 18,
                "text": "–ö–∞–∫ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Ä–µ—à–µ–Ω–∏—è?",
                "category": "work_pref",
                "options": [
                    {"text": "–ù–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–∫–∏", "value": 4, "category": "code"},
                    {"text": "–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö", "value": 8, "category": "data"},
                    {"text": "–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ-–æ–±—Ä–∞–∑–Ω–æ", "value": 12, "category": "design"},
                    {"text": "–ß–µ—Ä–µ–∑ –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–æ–≤", "value": 16, "category": "security"}
                ]
            },
            19: {
                "id": 19,
                "text": "–ö–∞–∫–æ–π –∂—É—Ä–Ω–∞–ª –≤—ã –∫—É–ø–∏—Ç–µ?",
                "category": "work_pref",
                "options": [
                    {"text": "–•–∞–∫–µ—Ä", "value": 4, "category": "code"},
                    {"text": "Harvard Business Review", "value": 8, "category": "data"},
                    {"text": "–ö–∞–∫ (–æ –¥–∏–∑–∞–π–Ω–µ)", "value": 12, "category": "design"},
                    {"text": "Information Security", "value": 16, "category": "security"}
                ]
            },
            20: {
                "id": 20,
                "text": "–í–∞—à –ø–æ–¥—Ö–æ–¥ –∫ –æ—à–∏–±–∫–∞–º?",
                "category": "work_pref",
                "options": [
                    {"text": "–†–∞–∑–±–∏—Ä–∞—é –±–∞–≥–∏", "value": 4, "category": "code"},
                    {"text": "–ò—â—É –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏", "value": 8, "category": "data"},
                    {"text": "–ü—Ä–µ–≤—Ä–∞—â–∞—é –≤ —Ñ–∏—á—É", "value": 12, "category": "design"},
                    {"text": "–£—Å—Ç—Ä–∞–Ω—è—é —É—è–∑–≤–∏–º–æ—Å—Ç–∏", "value": 16, "category": "security"}
                ]
            },
            21: {
                "id": 21,
                "text": "–ö–∞–∫ –≤–∞—Å –æ–ø–∏—Å—ã–≤–∞—é—Ç –¥—Ä—É–∑—å—è?",
                "category": "personal",
                "options": [
                    {"text": "–¢–µ—Ö–Ω–∞—Ä—å", "value": 4, "category": "code"},
                    {"text": "–ê–Ω–∞–ª–∏—Ç–∏–∫", "value": 8, "category": "data"},
                    {"text": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π", "value": 12, "category": "design"},
                    {"text": "–ë–¥–∏—Ç–µ–ª—å–Ω—ã–π", "value": 16, "category": "security"}
                ]
            },
            22: {
                "id": 22,
                "text": "–í–∞—à–∞ —Å—É–ø–µ—Ä—Å–∏–ª–∞?",
                "category": "personal",
                "options": [
                    {"text": "–†–µ—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á", "value": 4, "category": "code"},
                    {"text": "–ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π", "value": 8, "category": "data"},
                    {"text": "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–¥–µ–π", "value": 12, "category": "design"},
                    {"text": "–ü—Ä–µ–¥–≤–∏–¥–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤", "value": 16, "category": "security"}
                ]
            },
            23: {
                "id": 23,
                "text": "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –≤–∞–º –±–ª–∏–∂–µ?",
                "category": "personal",
                "options": [
                    {"text": "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å", "value": 4, "category": "code"},
                    {"text": "–ò–≥—Ä–∞ –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ", "value": 8, "category": "data"},
                    {"text": "–û—Ç–µ–ª—å –ì—Ä–∞–Ω–¥ –ë—É–¥–∞–ø–µ—à—Ç", "value": 12, "category": "design"},
                    {"text": "–í–æ–π–Ω–∞ –º–∏—Ä–æ–≤ Z", "value": 16, "category": "security"}
                ]
            },
            24: {
                "id": 24,
                "text": "–í–∞—à —Å—Ç–∏–ª—å –º—ã—à–ª–µ–Ω–∏—è?",
                "category": "personal",
                "options": [
                    {"text": "–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π", "value": 4, "category": "code"},
                    {"text": "–°–∏—Å—Ç–µ–º–Ω—ã–π", "value": 8, "category": "data"},
                    {"text": "–ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π", "value": 12, "category": "design"},
                    {"text": "–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π", "value": 16, "category": "security"}
                ]
            },
            25: {
                "id": 25,
                "text": "–ß—Ç–æ –≤–∞—Å —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç?",
                "category": "personal",
                "options": [
                    {"text": "–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥", "value": 4, "category": "code"},
                    {"text": "–ù–µ—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "value": 8, "category": "data"},
                    {"text": "–ë–µ–∑–≤–∫—É—Å–∏—Ü–∞", "value": 12, "category": "design"},
                    {"text": "–ë–µ—Å–ø–µ—á–Ω–æ—Å—Ç—å", "value": 16, "category": "security"}
                ]
            },
            26: {
                "id": 26,
                "text": "–ö–∞–∫ –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ?",
                "category": "personal",
                "options": [
                    {"text": "–£—á–∞—Å—Ç–≤—É—é –≤ CTF-—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö", "value": 4, "category": "code"},
                    {"text": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏", "value": 8, "category": "data"},
                    {"text": "–ü–æ—Å–µ—â–∞—é –≤—ã—Å—Ç–∞–≤–∫–∏", "value": 12, "category": "design"},
                    {"text": "–ò–∑—É—á–∞—é —Å—Ö–µ–º—ã –∑–∞—â–∏—Ç—ã", "value": 16, "category": "security"}
                ]
            },
            27: {
                "id": 27,
                "text": "–í–∞—à –¥–µ–≤–∏–∑?",
                "category": "personal",
                "options": [
                    {"text": "Move fast and break things", "value": 4, "category": "code"},
                    {"text": "Data never lies", "value": 8, "category": "data"},
                    {"text": "Design is intelligence made visible", "value": 12, "category": "design"},
                    {"text": "Security first", "value": 16, "category": "security"}
                ]
            },
            28: {
                "id": 28,
                "text": "–ö–∞–∫–æ–π –≥–∞–¥–∂–µ—Ç –∫—É–ø–∏—Ç–µ?",
                "category": "personal",
                "options": [
                    {"text": "Raspberry Pi", "value": 4, "category": "code"},
                    {"text": "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω—à–µ—Ç", "value": 8, "category": "data"},
                    {"text": "Wacom Cintiq", "value": 12, "category": "design"},
                    {"text": "YubiKey", "value": 16, "category": "security"}
                ]
            },
            29: {
                "id": 29,
                "text": "–ö–∞–∫ —É—á–∏—Ç–µ—Å—å –Ω–æ–≤–æ–º—É?",
                "category": "personal",
                "options": [
                    {"text": "–ß–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏–∫—É", "value": 4, "category": "code"},
                    {"text": "–ß–µ—Ä–µ–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "value": 8, "category": "data"},
                    {"text": "–ß–µ—Ä–µ–∑ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "value": 12, "category": "design"},
                    {"text": "–ß–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã", "value": 16, "category": "security"}
                ]
            },
            30: {
                "id": 30,
                "text": "–í–∞—à–∞ —Ü–µ–ª—å –≤ IT?",
                "category": "personal",
                "options": [
                    {"text": "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç", "value": 4, "category": "code"},
                    {"text": "–ù–∞–π—Ç–∏ –∏–Ω—Å–∞–π—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö", "value": 8, "category": "data"},
                    {"text": "–î–µ–ª–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é —Å—Ä–µ–¥—É –∫—Ä–∞—Å–∏–≤–µ–µ", "value": 12, "category": "design"},
                    {"text": "–ó–∞—â–∏—Ç–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "value": 16, "category": "security"}
                ]
            }
        }
    
    def create_user_session(self, user_id):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        def _create_session_operation():
            session = None
            try:
                with self._lock:
                    session = self._get_session()
                    session_id = str(uuid.uuid4())
                    user_session = UserSession(
                        user_id=user_id,
                        session_id=session_id,
                        current_question=1,
                        answers="{}",
                        is_completed=0
                    )
                    session.add(user_session)
                    session.commit()
                    return session_id
            finally:
                self._close_session(session)
        
        try:
            return self._retry_operation(_create_session_operation)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ create_user_session: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π session_id –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            return str(uuid.uuid4())
    
    def get_user_session(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        def _get_session_operation():
            session = None
            try:
                with self._lock:
                    session = self._get_session()
                    user_session = session.query(UserSession).filter_by(
                        user_id=user_id, 
                        is_completed=0
                    ).first()
                    return user_session
            finally:
                self._close_session(session)
        
        try:
            return self._retry_operation(_get_session_operation)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_user_session: {e}")
            return None
    
    def update_user_answers(self, user_id, question_id, answer_value):
        """–û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        def _update_answers_operation():
            session = None
            try:
                with self._lock:
                    session = self._get_session()
                    user_session = session.query(UserSession).filter_by(
                        user_id=user_id, 
                        is_completed=0
                    ).first()
                    
                    if user_session:
                        answers = json.loads(user_session.answers)
                        answers[str(question_id)] = answer_value
                        user_session.answers = json.dumps(answers)
                        user_session.current_question = question_id + 1
                        
                        if question_id >= 30:
                            user_session.is_completed = 1
                        
                        session.commit()
            finally:
                self._close_session(session)
        
        try:
            self._retry_operation(_update_answers_operation)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_user_answers: {e}")
    
    def get_specialization_from_code(self, spec_name):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–¥–∞ (fallback)"""
        specializations = {
            "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": {
                "id": 1,
                "name": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è. –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
                "skills": "‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Python, Java, C++)\n‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ü–û\n‚Ä¢ DevOps –ø—Ä–∞–∫—Ç–∏–∫–∏\n‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö",
                "careers": "‚Ä¢ Backend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n‚Ä¢ DevOps-–∏–Ω–∂–µ–Ω–µ—Ä\n‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û\n‚Ä¢ Team Lead"
            },
            "Data Science": {
                "id": 2,
                "name": "Data Science",
                "description": "–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –±–∏–∑–Ω–µ—Å-—Ä–µ—à–µ–Ω–∏–π.",
                "skills": "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n‚Ä¢ Python/R/SQL\n‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ Big Data —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                "careers": "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ ML-–∏–Ω–∂–µ–Ω–µ—Ä\n‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ"
            },
            "UX/UI –¥–∏–∑–∞–π–Ω": {
                "id": 3,
                "name": "UX/UI –¥–∏–∑–∞–π–Ω",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ —É–¥–æ–±–Ω—ã—Ö –∏ –∫—Ä–∞—Å–∏–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.",
                "skills": "‚Ä¢ Figma, Sketch, Adobe XD\n‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø—ã UX/UI\n‚Ä¢ –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è\n‚Ä¢ –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ü–≤–µ—Ç–æ–≤–µ–¥–µ–Ω–∏–µ",
                "careers": "‚Ä¢ UX-–¥–∏–∑–∞–π–Ω–µ—Ä\n‚Ä¢ UI-–¥–∏–∑–∞–π–Ω–µ—Ä\n‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω–µ—Ä\n‚Ä¢ UX-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å"
            },
            "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": {
                "id": 4,
                "name": "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                "description": "–ó–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –æ—Ç –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑. –ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤.",
                "skills": "‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã\n‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è\n‚Ä¢ Penetration Testing\n‚Ä¢ Forensics\n‚Ä¢ Compliance –∏ –∞—É–¥–∏—Ç",
                "careers": "‚Ä¢ –ò–Ω–∂–µ–Ω–µ—Ä –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n‚Ä¢ –ü–µ–Ω—Ç–µ—Å—Ç–µ—Ä\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n‚Ä¢ CISO"
            },
            "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": {
                "id": 5,
                "name": "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
                "description": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.",
                "skills": "‚Ä¢ Docker, Kubernetes\n‚Ä¢ CI/CD (Jenkins, GitLab)\n‚Ä¢ –û–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (AWS, Azure)\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ Linux –∏ —Å–∫—Ä–∏–ø—Ç–∏–Ω–≥",
                "careers": "‚Ä¢ DevOps-–∏–Ω–∂–µ–Ω–µ—Ä\n‚Ä¢ SRE-–∏–Ω–∂–µ–Ω–µ—Ä\n‚Ä¢ –û–±–ª–∞—á–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä\n‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä"
            },
            "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": {
                "id": 6,
                "name": "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                "description": "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è iOS –∏ Android. –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
                "skills": "‚Ä¢ Swift/Objective-C (iOS)\n‚Ä¢ Kotlin/Java (Android)\n‚Ä¢ React Native/Flutter\n‚Ä¢ UI/UX –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö\n‚Ä¢ App Store –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
                "careers": "‚Ä¢ iOS-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n‚Ä¢ Android-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n‚Ä¢ –ú–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n‚Ä¢ React Native-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"
            },
            "Game Development": {
                "id": 7,
                "name": "Game Development",
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º. –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.",
                "skills": "‚Ä¢ Unity/Unreal Engine\n‚Ä¢ C#/C++\n‚Ä¢ 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ –ò–≥—Ä–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞\n‚Ä¢ –ó–≤—É–∫–æ–≤–æ–π –¥–∏–∑–∞–π–Ω",
                "careers": "‚Ä¢ –ò–≥—Ä–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n‚Ä¢ Unity-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n‚Ä¢ –ì–µ–π–º-–¥–∏–∑–∞–π–Ω–µ—Ä\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ö—É–¥–æ–∂–Ω–∏–∫"
            },
            "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": {
                "id": 8,
                "name": "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.",
                "skills": "‚Ä¢ Deep Learning (PyTorch, TensorFlow)\n‚Ä¢ Computer Vision\n‚Ä¢ NLP\n‚Ä¢ MLOps\n‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
                "careers": "‚Ä¢ ML-–∏–Ω–∂–µ–Ω–µ—Ä\n‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ò–ò\n‚Ä¢ –ò–Ω–∂–µ–Ω–µ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è\n‚Ä¢ NLP-–∏–Ω–∂–µ–Ω–µ—Ä"
            }
        }
        return specializations.get(spec_name, None)
    
    # –ê–¥–º–∏–Ω-–º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    def get_all_universities(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—É–∑—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—É–∑—ã –∏–∑ –∫–æ–¥–∞ (—Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–æ–¥–µ)
        all_universities = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—É–∑—ã –∏–∑ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
        specializations = [
            "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è", "Data Science", "UX/UI –¥–∏–∑–∞–π–Ω", "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∏—è", "–ú–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "Game Development", "AI/ML –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
        ]
        
        uni_id = 1
        for spec_name in specializations:
            spec_universities = self.get_universities(spec_name)
            if spec_universities:
                for uni in spec_universities:
                    all_universities.append({
                        'id': uni_id,
                        'name': uni['name'],
                        'specialization_id': self.get_specialization_id_by_name(spec_name),
                        'score_min': uni['score_min'],
                        'score_max': uni['score_max'],
                        'location': uni['location'],
                        'url': uni['url']
                    })
                    uni_id += 1
        
        return all_universities
    
    def add_university(self, name, specialization_id, score_min, score_max, location, url):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤—É–∑"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                university = University(
                    name=name,
                    specialization_id=specialization_id,
                    score_min=score_min,
                    score_max=score_max,
                    location=location,
                    url=url
                )
                session.add(university)
                session.commit()
                return university.id
        finally:
            self._close_session(session)
    
    def delete_university(self, university_id):
        """–£–¥–∞–ª–∏—Ç—å –≤—É–∑ –ø–æ ID"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                university = session.query(University).filter_by(id=university_id).first()
                if university:
                    session.delete(university)
                    session.commit()
                    return True
                return False
        finally:
            self._close_session(session)
    
    def get_all_questions(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                questions = session.query(Question).all()
                result = {}
                for q in questions:
                    result[q.id] = {
                        "id": q.id,
                        "text": q.text,
                        "category": q.category,
                        "options": json.loads(q.options)
                    }
                return result
        finally:
            self._close_session(session)
    
    def add_question(self, question_data):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ë–î"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                question = Question(
                    text=question_data['text'],
                    options=json.dumps(question_data['options']),
                    category=question_data['category']
                )
                session.add(question)
                session.commit()
                return question.id
        except Exception as e:
            session.rollback()
            raise e
        finally:
            self._close_session(session)
    
    def delete_question(self, question_id):
        """–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                question = session.query(Question).filter_by(id=question_id).first()
                if question:
                    session.delete(question)
                    session.commit()
                    return True
                return False
        except Exception as e:
            session.rollback()
            raise e
        finally:
            self._close_session(session)
    
    def get_user_statistics(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                total_users = session.query(UserSession.user_id).distinct().count()
                active_sessions = session.query(UserSession).filter_by(is_completed=0).count()
                completed_tests = session.query(UserSession).filter_by(is_completed=1).count()
                
                return {
                    'total_users': total_users,
                    'active_sessions': active_sessions,
                    'completed_tests': completed_tests
                }
        finally:
            self._close_session(session)
    
    def get_specialization_id_by_name(self, spec_name):
        """–ü–æ–ª—É—á–∏—Ç—å ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ –ë–î"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                spec = session.query(Specialization).filter_by(name=spec_name).first()
                return spec.id if spec else None
        finally:
            self._close_session(session)
    
    def get_all_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                users = session.query(UserSession.user_id).distinct().all()
                return [user[0] for user in users]
        finally:
            self._close_session(session)
    
    def get_university(self, university_id):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—É–∑ –ø–æ ID"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                university = session.query(University).filter_by(id=university_id).first()
                if university:
                    return {
                        'id': university.id,
                        'name': university.name,
                        'specialization_id': university.specialization_id,
                        'score_min': university.score_min,
                        'score_max': university.score_max,
                        'location': university.location,
                        'url': university.url
                    }
                return None
        finally:
            self._close_session(session)
    
    def get_all_specializations(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                specs = session.query(Specialization).all()
                result = {}
                for spec in specs:
                    result[spec.id] = {
                        "id": spec.id,
                        "name": spec.name,
                        "description": spec.description,
                        "tech_score": spec.tech_score,
                        "analytic_score": spec.analytic_score,
                        "creative_score": spec.creative_score,
                        "careers": spec.careers
                    }
                return result
        finally:
            self._close_session(session)
    
    def get_specialization(self, spec_name):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ –ë–î —Å fallback"""
        def _get_specialization_operation():
            session = None
            try:
                with self._lock:
                    session = self._get_session()
                    spec = session.query(Specialization).filter_by(name=spec_name).first()
                    if spec:
                        return {
                            "id": spec.id,
                            "name": spec.name,
                            "description": spec.description,
                            "tech_score": spec.tech_score,
                            "analytic_score": spec.analytic_score,
                            "creative_score": spec.creative_score,
                            "careers": spec.careers
                        }
                    return None
            finally:
                self._close_session(session)
        
        try:
            result = self._retry_operation(_get_specialization_operation)
            if result:
                return result
            else:
                # Fallback –∫ –¥–∞–Ω–Ω—ã–º –∏–∑ –∫–æ–¥–∞
                return self.get_specialization_from_code(spec_name)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_specialization: {e}")
            # Fallback –∫ –¥–∞–Ω–Ω—ã–º –∏–∑ –∫–æ–¥–∞
            return self.get_specialization_from_code(spec_name)
    
    def get_universities(self, spec_name):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—É–∑–æ–≤ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                spec = session.query(Specialization).filter_by(name=spec_name).first()
                if not spec:
                    return []
                
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                universities = session.query(University).filter_by(specialization_id=spec.id).all()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                result = []
                for uni in universities:
                    result.append({
                        "name": uni.name,
                        "score_min": uni.score_min,
                        "score_max": uni.score_max,
                        "url": uni.url,
                        "location": uni.location,
                        "program": f"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {spec_name}"
                    })
                
                return result
        finally:
            self._close_session(session)
    def get_universities_by_specialization(self, specialization_id):
        """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –ø–æ ID —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        def _get_universities_operation():
            session = None
            try:
                with self._lock:
                    session = self._get_session()
                    universities = session.query(University).filter_by(specialization_id=specialization_id).all()
                    
                    result = []
                    for uni in universities:
                        result.append({
                            "id": uni.id,
                            "name": uni.name,
                            "city": uni.location.split(',')[0] if uni.location else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥",
                            "score_min": uni.score_min,
                            "score_max": uni.score_max,
                            "url": uni.url,
                            "location": uni.location
                        })
                    
                    return result
            finally:
                self._close_session(session)
        
        try:
            return self._retry_operation(_get_universities_operation)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_universities_by_specialization: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            return [
                {"id": 1, "name": "–ú–ì–£ –∏–º. –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞", "city": "–ú–æ—Å–∫–≤–∞", "score_min": 85, "score_max": 100, "url": "https://www.msu.ru", "location": "–ú–æ—Å–∫–≤–∞"},
                {"id": 2, "name": "–°–ü–±–ì–£", "city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "score_min": 80, "score_max": 95, "url": "https://spbu.ru", "location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"},
                {"id": 3, "name": "–ú–§–¢–ò", "city": "–ú–æ—Å–∫–≤–∞", "score_min": 90, "score_max": 100, "url": "https://mipt.ru", "location": "–ú–æ—Å–∫–≤–∞"},
                {"id": 4, "name": "–ò–¢–ú–û", "city": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "score_min": 85, "score_max": 98, "url": "https://itmo.ru", "location": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"}
            ]
    
    def add_specialization(self, name, description, tech_score, analytic_score, creative_score, careers):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                specialization = Specialization(
                    name=name,
                    description=description,
                    tech_score=tech_score,
                    analytic_score=analytic_score,
                    creative_score=creative_score,
                    careers=careers
                )
                session.add(specialization)
                session.commit()
                return specialization.id
        except Exception as e:
            session.rollback()
            raise e
        finally:
            self._close_session(session)
    
    def delete_specialization(self, specialization_id):
        """–£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ ID"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                specialization = session.query(Specialization).filter_by(id=specialization_id).first()
                if specialization:
                    session.delete(specialization)
                    session.commit()
                    return True
                return False
        except Exception as e:
            session.rollback()
            raise e
        finally:
            self._close_session(session)
    
    def get_specialization_by_id(self, specialization_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ ID"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                spec = session.query(Specialization).filter_by(id=specialization_id).first()
                if spec:
                    return {
                        "id": spec.id,
                        "name": spec.name,
                        "description": spec.description,
                        "tech_score": spec.tech_score,
                        "analytic_score": spec.analytic_score,
                        "creative_score": spec.creative_score,
                        "careers": spec.careers
                    }
                return None
        finally:
            self._close_session(session)
 
    def get_unique_universities_count(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—É–∑–æ–≤ –ø–æ –∏–º–µ–Ω–∏"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                result = session.execute(text("SELECT COUNT(DISTINCT name) FROM universities")).scalar()
                return int(result or 0)
        finally:
            self._close_session(session)

    def get_unique_universities(self):
        """–°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—É–∑–æ–≤: name, location, url (–ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Ö–æ–∂–¥–µ–Ω–∏—é)"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                rows = session.execute(text(
                    """
                    SELECT name,
                           MIN(location) AS location,
                           MIN(COALESCE(url, '')) AS url
                    FROM universities
                    GROUP BY name
                    ORDER BY name COLLATE NOCASE
                    """
                )).all()
                return [{"name": r[0], "location": r[1], "url": (r[2] or None)} for r in rows]
        finally:
            self._close_session(session)

    def delete_university_by_name(self, uni_name):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—É–∑–∞ –ø–æ –∏–º–µ–Ω–∏"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                session.execute(text("DELETE FROM universities WHERE name = :n"), {"n": uni_name})
                session.commit()
                return True
        except Exception as e:
            if session:
                session.rollback()
            raise e
        finally:
            self._close_session(session)

    def get_specialization_names(self):
        """–í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –∏–∑ –ë–î"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                rows = session.execute(text("SELECT name FROM specializations ORDER BY name COLLATE NOCASE")).all()
                return [r[0] for r in rows]
        finally:
            self._close_session(session)

    def export_universities_to_json(self, out_path):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—É–∑–æ–≤ –≤ JSON (–¥–ª—è —Å–∞–π—Ç–∞)"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                rows = session.execute(text(
                    """
                    SELECT u.name, u.location, u.score_min, u.score_max, u.url, s.name AS specialization
                    FROM universities u
                    LEFT JOIN specializations s ON s.id = u.specialization_id
                    ORDER BY u.name COLLATE NOCASE
                    """
                )).all()
                data = []
                for name, location, smin, smax, url, spec in rows:
                    data.append({
                        "name": name,
                        "city": location,
                        "score_min": smin,
                        "score_max": smax,
                        "url": url,
                        "specialization": spec,
                    })
                with open(out_path, "w", encoding="utf-8") as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                return len(data)
        finally:
            self._close_session(session)

    def sync_website_data(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–æ–º - —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML"""
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
            count = self.export_universities_to_json('universities.json')
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤—É–∑–æ–≤ –≤ universities.json")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º HTML —Ñ–∞–π–ª —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self.update_universities_html()
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∞–π—Ç–∞: {e}")
            return False

    def update_universities_html(self):
        """–û–±–Ω–æ–≤–∏—Ç—å universities.html —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—É–∑–æ–≤
            session = None
            try:
                with self._lock:
                    session = self._get_session()
                    rows = session.execute(text(
                        """
                        SELECT u.name, u.location, u.score_min, u.score_max, u.url, s.name AS specialization
                        FROM universities u
                        LEFT JOIN specializations s ON s.id = u.specialization_id
                        ORDER BY u.name COLLATE NOCASE
                        """
                    )).all()
                    universities_data = []
                    for name, location, smin, smax, url, spec in rows:
                        universities_data.append({
                            "name": name,
                            "city": location,
                            "score_min": smin,
                            "score_max": smax,
                            "url": url,
                            "specialization": spec,
                        })
            finally:
                self._close_session(session)
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π HTML —Ñ–∞–π–ª
            try:
                with open('universities.html', 'r', encoding='utf-8') as f:
                    html_content = f.read()
            except FileNotFoundError:
                print("‚ùå –§–∞–π–ª universities.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ HTML
            import re
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ HTML
            universities_json = json.dumps(universities_data, ensure_ascii=False, indent=2)
            
            # –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ HTML
            pattern = r'window\.EMBEDDED_UNIVERSITIES = \[.*?\];'
            replacement = f'window.EMBEDDED_UNIVERSITIES = {universities_json};'
            
            new_html_content = re.sub(pattern, replacement, html_content, flags=re.DOTALL)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ HTML
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—É–∑—ã
            unique_universities = set()
            for uni in universities_data:
                unique_universities.add(uni['name'])
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—É–∑–æ–≤
            uni_count_pattern = r'<strong id="uniqueUniCount">\d+</strong>'
            uni_count_replacement = f'<strong id="uniqueUniCount">{len(unique_universities)}</strong>'
            new_html_content = re.sub(uni_count_pattern, uni_count_replacement, new_html_content)
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
            specs_count_pattern = r'<strong id="totalSpecsCount">\d+</strong>'
            specs_count_replacement = f'<strong id="totalSpecsCount">{len(universities_data)}</strong>'
            new_html_content = re.sub(specs_count_pattern, specs_count_replacement, new_html_content)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
            with open('universities.html', 'w', encoding='utf-8') as f:
                f.write(new_html_content)
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω universities.html —Å {len(universities_data)} –≤—É–∑–∞–º–∏")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è HTML: {e}")

    def get_university_id_by_name(self, uni_name):
        """–ü–æ–ª—É—á–∏—Ç—å ID –≤—É–∑–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ)"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                result = session.execute(text("SELECT id FROM universities WHERE name = :n ORDER BY id LIMIT 1"), {"n": uni_name}).scalar()
                return int(result) if result else None
        finally:
            self._close_session(session)

    def get_university_name_by_id(self, uni_id):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—É–∑–∞ –ø–æ ID"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                result = session.execute(text("SELECT name FROM universities WHERE id = :id"), {"id": uni_id}).scalar()
                return result
        finally:
            self._close_session(session)

    def get_university_id_by_name_and_spec(self, uni_name, spec_name):
        """–ü–æ–ª—É—á–∏—Ç—å ID –≤—É–∑–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        session = None
        try:
            with self._lock:
                session = self._get_session()
                result = session.execute(text(
                    """
                    SELECT u.id FROM universities u
                    LEFT JOIN specializations s ON s.id = u.specialization_id
                    WHERE u.name = :uni_name AND (s.name = :spec_name OR (:spec_name = '–ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏' AND s.name IS NULL))
                    ORDER BY u.id LIMIT 1
                    """
                ), {"uni_name": uni_name, "spec_name": spec_name}).scalar()
                return int(result) if result else None
        finally:
            self._close_session(session)
 